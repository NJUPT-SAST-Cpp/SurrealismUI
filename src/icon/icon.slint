/**
* ============================================
* @author:syf20020816@outlook.com
* @since:20230905
* @version:0.0.1
* @type:interface
* @description: 
* # SIcon
* there are 2658 different icons in SIcon from : https://github.com/bytedance/iconpark
* ## properties:
* - in property <Themes> theme : surrealism theme;
* - in property <image> source : icon source;
* - in-out property <brush> colorize : icon color;
* - in property <ImageFit> image-fit : origin Image.image-fit;
* - in property <ImageRendering> image-rendering : origin Image.image-rendering;
* - in-out property <RotationProps> rotation : origin Image.rotation props;
* ## callbacks: 
* - callback clicked : run if you click the icon
* ============================================
*/
import {ROOT_STYLES,DefaultSIconProps} from "../../themes/index.slint";
import {Themes,RotationProps} from "../../use/index.slint";

export component Icon{
  //image props
  in property <Themes> theme : DefaultSIconProps.theme;
  in property <image> source : DefaultSIconProps.source;
  in-out property <brush> colorize : DefaultSIconProps.colorize;
  in property <ImageFit> image-fit : DefaultSIconProps.image-fit;
  in property <ImageRendering> image-rendering : DefaultSIconProps.image-rendering;
  in-out property <RotationProps> rotation : DefaultSIconProps.rotation;
  // get icon src from for iter item
  callback clicked;
  //default icon size
  padding: DefaultSIconProps.padding;
  height: DefaultSIconProps.height;
  width: DefaultSIconProps.width;
  states [
    light when theme == Themes.Light: {
      colorize :ROOT-STYLES.sur-theme-colors.light.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
    primary when theme == Themes.Primary: {
      colorize :ROOT-STYLES.sur-theme-colors.primary.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
    success when theme == Themes.Success: {
      colorize :ROOT-STYLES.sur-theme-colors.success.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
    info when theme == Themes.Info: {
      colorize :ROOT-STYLES.sur-theme-colors.info.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
    warning when theme == Themes.Warning: {
      colorize :ROOT-STYLES.sur-theme-colors.warning.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
    error when theme == Themes.Error: {
      colorize :ROOT-STYLES.sur-theme-colors.error.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
    dark when theme == Themes.Dark: {
      colorize :ROOT-STYLES.sur-theme-colors.dark.font;
      out{
        animate  * {
          duration: ROOT-STYLES.sur-an-duration;
          easing: ROOT-STYLES.sur-an-easing;
        }
      }
    }
  ]
  TouchArea {
    inner:=Image{
      source : root.source;
      colorize : root.colorize;
      image-fit : root.image-fit;
      image-rendering : root.image-rendering;
      rotation-angle: root.rotation.rotation-angle;
      rotation-origin-x: root.rotation.rotation-origin-x;
      rotation-origin-y: root.rotation.rotation-origin-y;
    }
  }
}