import { SCard } from "../card/index.slint";
import { Themes,BorderType,UseSurrealismFn,ColorLevel } from "../../use/index.slint";
import { ROOT_STYLES,DefaultSProgressProps } from "../../themes/index.slint";
import { LineProgress } from "../progress/index.slint";

component HSlider {
    in property <float> maximum;
    in property <float> minimum;
    in-out property <float> value;

    FocusScope {
        slider-line := SCard {
            height: root.height;
            width: root.width;
            border-radius: root.height / 2;
            
            Rectangle {
                x: 0;
                width: 30%;
                background: red;
            }
        }
    }
    
}

component VSlider {
    in property <float> maximum;
    in property <float> minimum;
    in-out property <float> value;

    slider-line := SCard {
        height: root.height;
        width: root.width;
        border-radius: root.height / 2;
        background: red;
    }
}

export component Slider {
    in property <bool> circle: DefaultSProgressProps.circle;
    in property <string> text : @tr("now: {}%" , round(progress * 100));
    in property <Themes> theme :DefaultSProgressProps.theme;
    in-out property <float> progress : DefaultSProgressProps.progress;
    in-out property <int> font-weight : DefaultSProgressProps.font-weight;
    in-out property <length> font-size: DefaultSProgressProps.font-size;
    in-out property <brush> font-color : DefaultSProgressProps.font-color;
    in-out property <bool> font-italic : DefaultSProgressProps.font-italic;
    in-out property <string> font-family : DefaultSProgressProps.font-family;
    in-out property <length> stroke-width: DefaultSProgressProps.stroke-width;
    in-out property <brush> stroke-color: UseSurrealismFn.get-color(root.theme, ColorLevel.Normal);
    // private property <length> bar-height: target.get-bar-hw().height;
    // private property <length> bar-width: target.get-bar-hw().width;
    bar:= LineProgress {
        text: "";
        theme: theme;
        progress: progress * 100;
        font-weight: font-weight;
        font-size: font-size;
        font-color: font-color;
        font-italic: font-italic;
        font-family: font-family;
        stroke-width: stroke-width;
        stroke-color: stroke-color;
        bar-area:= TouchArea {
            height: parent.height;
            width: parent.width;
            pointer-event(event) => {
                if event.kind == PointerEventKind.down{
                    debug(self.mouse-x);
                    debug("down");
                }
                if event.kind == PointerEventKind.up{
                    root.progress = self.mouse-x / parent.width;
                    debug("up");
                }
                
            }
        }
    }

}

component TestSlider {
    height: 400px;
    width: 400px;
    Slider {
        width: 360px;
        height: 120px;
        progress: 0.3;
    }
}