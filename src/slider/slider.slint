import { SCard } from "../card/index.slint";
import { Themes,BorderType,UseSurrealismFn,ColorLevel,BarType } from "../../use/index.slint";
import { ROOT_STYLES,DefaultSProgressProps } from "../../themes/index.slint";
import { LineProgress } from "../progress/index.slint";


component VSlider {
    in property <float> maximum;
    in property <float> minimum;
    in-out property <float> value;

    slider-line := SCard {
        height: root.height;
        width: root.width;
        border-radius: root.height / 2;
        background: red;
    }
}

export component Slider {
    in property <Orientation> orientation: Orientation.horizontal;
    in property <BarType> bar-type: DefaultSProgressProps.bar-type;
    in property <string> text : @tr("now: {}%" , round(progress * 100));
    in property <Themes> theme :DefaultSProgressProps.theme;
    in-out property <float> progress : DefaultSProgressProps.progress;
    in-out property <int> font-weight : DefaultSProgressProps.font-weight;
    in-out property <length> font-size: DefaultSProgressProps.font-size;
    in-out property <brush> font-color : DefaultSProgressProps.font-color;
    in-out property <bool> font-italic : DefaultSProgressProps.font-italic;
    in-out property <string> font-family : DefaultSProgressProps.font-family;
    in-out property <length> stroke-width: DefaultSProgressProps.stroke-width;
    in-out property <brush> stroke-color: UseSurrealismFn.get-color(root.theme, ColorLevel.Normal);
    in property <length> border-radius <=> bar.border-radius;
    in property <length> bar-height <=> bar.height;
    // in property <length> bar-width <=> bar.width;
    bar:= LineProgress {
        width: parent.width;
        text: "";
        theme: theme;
        progress: progress * 100;
        font-weight: font-weight;
        font-size: font-size;
        font-color: font-color;
        font-italic: font-italic;
        font-family: font-family;
        stroke-width: stroke-width;
        stroke-color: stroke-color;
        bar-area:= TouchArea {
            height: parent.height;
            width: parent.width;
            moved => {
                root.progress = self.mouse-x / parent.width;
            }
        }
    }

}

component TestSlider {
    height: 400px;
    width: 400px;
    VerticalLayout {
        spacing: 20px;
        padding: 20px;
        Slider {
            theme: Light;
            width: 360px;
            height: 40px;
            stroke-width: 16px;
            progress: 0.3;
        }
        Slider {
            width: 360px;
            height: 40px;
            progress: 80%;
        }

        Slider {
            width: 30px;
            height: 220px;
            stroke-width: 220px;
            progress: 80%;
            orientation: Orientation.vertical;
        }
    }
}