/**
* ============================================
* @author:syf20020816@outlook.com
* @since:20231018
* @version:0.1.7
* @type:interface
* @description:
* # SAlert
* SAlert is used to display important prompt information on the page
* ## properties
* - private property <Themes> theme : Surrealism theme ‚õî
* - in-out property <string> content :  alert content you want to display
* - in-out property <bool> is-show : show the alert or not
* - in property <ResultType> res-type : result typeüëç
* ## functions
* - public function open() : open alert
* - public function close() : close alert
* ============================================
*/

import { SCard } from "../card/index.slint";
import { SText } from "../text/index.slint";
import { SIcon } from "../icon/index.slint";

import { Themes,ResultType,UseIcons } from "../../use/index.slint";
export component Alert inherits Window{
  height: 100%;
  width: 100%;
  padding: 0;
  padding-bottom: 0;
  padding-left: 0;
  padding-right: 0;
  padding-top: 0;
  always-on-top:true;
  opacity: 1;
  visible: is-show;
  z: 1111;
  private property <Themes> theme : Success;
  in-out property <string> content : "this is a alert message!";
  in-out property <bool> is-show : false;
  in property <ResultType> res-type:ResultType.Success;
  public function open() {
      root.is-show = true;
  }
  public function close() {
    root.is-show = false;
  }
  init => {
    if(res-type==ResultType.Primary){
      root.theme = Themes.Primary;
      root.icon = UseIcons.icons.Smiling-face;
      root.content = "This is a primary message!";
    }else if (res-type==ResultType.Success){
      root.theme = Themes.Success;
      root.content = "This is a success message!";
      root.icon = UseIcons.icons.Success;
    }else if (res-type==ResultType.Info){
      root.theme = Themes.Info;
      root.icon = UseIcons.icons.Info;
      root.content = "This is a info message!";
    }else if (res-type==ResultType.Error){
      root.theme = Themes.Error;
      root.icon = UseIcons.icons.Close-one;
      root.content = "This is a error message!"
    }else if (res-type==ResultType.Warning){
      root.theme = Themes.Warning;
      root.icon = UseIcons.icons.Attention;
      root.content = "This is a warning message!"
    }else{
      root.theme = Themes.Light;
      root.icon = UseIcons.icons.Help;
      root.content = "This is a help message!"
    }
  }
  alert:=SCard { 
    y: 6px;
    clip: true;
    card-width: parent.width * 0.86;
    card-height: info.height;
    theme: root.theme;
    layuot := HorizontalLayout {
      alignment: LayoutAlignment.start;
      icon-view:=Rectangle{
        icon:=SIcon { 
          theme: root.theme;
          source: root.icon;
          height: 18px;
          width: 18px;
        }
      }
      Rectangle {
        width: info.width;
        info:=SText {
          theme: root.theme;
          text: root.content;
          width: layuot.width - 60px;
          horizontal-alignment: left;
        }
      }
      close-view:=Rectangle{
        close:=SIcon{
          source: UseIcons.icons.Close-one;
          theme: root.theme;
          clicked => {
            root.close();
          }
        }
      }
    }
  }
}