/**
* ============================================
* @author:syf20020816@outlook.com
* @since:20231018
* @version:0.1.7
* @type:interface
* @description:
* # SAlert
* SAlert is used to display important prompt information on the page
* ## properties
* - private property <Themes> theme : Surrealism theme ‚õî
* - in-out property <string> text :  alert text you want to display
* - in-out property <bool> is-show : show the alert or not
* - in property <ResultType> res-type : result typeüëç
* ## functions
* - public function open() : open alert
* - public function close() : close alert
* ============================================
*/

import { SCard } from "../card/index.slint";
import { SText } from "../text/index.slint";
import { SIcon } from "../icon/index.slint";
import { DefaultSAlertProps } from "../../themes/index.slint";
import { Themes,ResultType,UseIcons } from "../../use/index.slint";
export component Alert inherits Window{
  height: 100%;
  width: 100%;
  padding: 0;
  padding-bottom: 0;
  padding-left: 0;
  padding-right: 0;
  padding-top: 0;
  always-on-top:true;
  opacity: 1;
  visible: is-show;
  z: 1111;
  private property <Themes> theme : Success;
  in-out property <string> text : "this is a alert message!";
  in-out property <bool> is-show : false;
  in property <ResultType> res-type:ResultType.Success;
  in property <image> close-icon : UseIcons.icons.Close-one;
  in property <int> font-weight : DefaultSAlertProps.font-weight;
  in property <length> font-size: DefaultSAlertProps.font-size;
  in property <brush> font-color : DefaultSAlertProps.color;
  in property <bool> font-italic : DefaultSAlertProps.font-italic;
  in property <string> font-family : DefaultSAlertProps.font-family;
  public function open() {
      root.is-show = true;
  }
  public function close() {
    root.is-show = false;
  }
  
  states [
    primary when res-type==ResultType.Primary: {
      root.theme : Themes.Primary;
      root.icon : UseIcons.icons.Smiling-face;
    }
    success when res-type==ResultType.Success: {
      root.theme : Themes.Success;
      root.icon : UseIcons.icons.Success;
    }
    info when res-type==ResultType.Info: {
      root.theme : Themes.Info;
      root.icon : UseIcons.icons.Info;
    }
    warning when res-type==ResultType.Warning: {
      root.theme : Themes.Warning;
      root.icon : UseIcons.icons.Attention;
    }
    error when res-type==ResultType.Error: {
      root.theme : Themes.Error;
      root.icon : UseIcons.icons.Close-one;
    }
    help when res-type==ResultType.Help: {
      root.theme : Themes.Light;
      root.icon : UseIcons.icons.Help;
    }
  ]
  alert:=SCard { 
    y: 6px;
    clip: true;
    card-width: parent.width * 0.8;
    card-height: root.font-size * 1.5;
    theme: root.theme;
    layuot := HorizontalLayout {
      padding-left: 16px;
      spacing: 16px;
      padding-right: 16px;
      // alignment: LayoutAlignment.space-between;
      Rectangle {
        width: type-icon.width;
        type-icon:=SIcon {
          source: root.icon;
        }
      }
      SText {
        theme: root.theme;
        text: root.text;
        font-family: root.font-family;
        font-size: root.font-size;
        font-italic: root.font-italic;
        font-weight: root.font-weight;
        color: root.font-color;
      }
      Rectangle {
        width: close-icon.width;
        close-icon:=SIcon {
          source: root.close-icon;
          height: root.font-size;
          width: root.font-size;
          clicked => {
            root.close()
          }
        }
      }
    }
  }
}