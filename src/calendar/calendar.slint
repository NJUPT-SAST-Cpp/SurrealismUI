import { SText } from "../text/index.slint";
import { SCard } from "../card/index.slint";
import { UseSurrealismFn, UseIcons, ColorLevel } from "../../use/index.slint";
import {ROOT-STYLES} from "../../themes/index.slint";
import { SIcon } from "../icon/index.slint";
export struct SDate{
    year: int,
    month: int,
    day: int,
    hour: int,
    minute: int,
    second: int,
}

export component Calendar inherits SCard {
    width: 300px;
    height: 320px;
    in-out property <SDate> current : {
        year: 2024,
        month: 4,
        day: 15,
    };
    // zeller algorithm
    // https://en.wikipedia.org/wiki/Zeller%27s_congruence
    in-out property <SDate> active-date: current;
    private property <[string]> weekdays : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    private property <int> is_leap_year: UseSurrealismFn.is-leap-year(self.current.year) ? 1 : 0;
    private property <[int]> days_in_month : [31, 28 + self.is_leap_year, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    private property <int> current-weekday : UseSurrealismFn.get-weekday(self.current.year, self.current.month, self.current.day);
    private property <int> current-month-days: root.days_in_month[current.month - 1];
    private property <int> end-day: UseSurrealismFn.get-weekday(self.current.year, self.current.month, current-month-days);
    private property <int> start-day: UseSurrealismFn.get-weekday(self.current.year, self.current.month, 1);
    
    pure function fmt(v: int)-> string {
        if v < 10 {
            return "0" + v;
        }
        return v;
    }
    pure function get-line-length(index: int) -> int{
        if index == 0 {
            return 7 - root.start-day;
        }
       
        return ((current-month-days - (7 - root.start-day)) / 7 / index) >= 1 ? 7 : (end-day + 1);
    }
    pure function get-day(item: int, index:int) -> int {
        return ((item + 1) + index * 7) - (index == 0 ? 0 : root.start-day);
    }
    pure function get-line-num() -> int {
        return ceil((root.current-month-days + root.start-day ) / 7);
    }
    function update() {
        root.is_leap_year = UseSurrealismFn.is-leap-year(self.active-date.year) ? 1 : 0;
        root.current-weekday = UseSurrealismFn.get-weekday(root.active-date.year, self.active-date.month, self.active-date.day);
        root.current-month-days = root.days_in_month[active-date.month - 1];
        root.end-day = UseSurrealismFn.get-weekday(self.active-date.year, self.active-date.month, current-month-days);
        root.start-day = UseSurrealismFn.get-weekday(self.active-date.year, self.active-date.month, 1);
    }
    callback up(SDate);
    callback down(SDate);
    callback change(SDate);
    VerticalLayout {
        padding: 12px;
        header:= HorizontalLayout{

            alignment: space-between;
            height: 46px;
            Rectangle {
                SText {
                    theme: root.theme;
                    font-weight: 700;
                    font-size: 18px;
                    color: UseSurrealismFn.active-color();
                    text: @tr("Year: {}", root.active-date.year);
                }
            }
            Rectangle {
                SText {
                    font-size: 14px;
                    theme: root.theme;
                    text: @tr("{}\n{}", fmt(root.active-date.month), fmt(root.active-date.day));
                }
            }
        }
        body:= VerticalLayout{
            up-wrap:= Rectangle {
                height: 30px;
                background: up-area.has-hover ? UseSurrealismFn.active-color() : UseSurrealismFn.get-color(root.theme, ColorLevel.Normal);
                animate background {
                    duration:ROOT-STYLES.sur-an-duration;
                    easing: ROOT-STYLES.sur-an-easing;
                }
                up-area:= TouchArea {
                    z:111;
                    mouse-cursor: pointer;
                    clicked => {
                        active-date.day = 1;
                        active-date.month = active-date.month - 1;
                        if active-date.month < 1 {
                            active-date.month = 12;
                            active-date.year = active-date.year - 1;
                        }
                        root.update();
                        root.up(active-date);
                    }
                    
                }
                SIcon {
                    theme: root.theme;
                    colorize: self.get-colorize();
                    z: 1;
                    source: UseIcons.icons.Up;
                }
            }
            week-layout:=HorizontalLayout {
                for weakItem in root.weekdays : Rectangle {
                    width: parent.width / 7;
                    SText {
                        theme: root.theme;
                        text: weakItem;
                        font-size: 16px;
                        font-weight: 700;
                    }
                }
            }
            for item[index] in root.get-line-num() : HorizontalLayout{
                if index == 0: Rectangle {
                    width: parent.width / 7 * root.start-day;
                }
                for wItem[wIndex] in get-line-length(index) : Rectangle{
                    width: parent.width / 7;
                    SCard {
                        private property <bool> is-today: get-day(wItem, index) == root.current.day && root.current.year == root.active-date.year && root.current.month == root.active-date.month;
                        in-out property <bool> is-active : root.active-date.day == get-day(wItem, index);
                        theme: root.theme;
                        width: inner-text.font-size * 2;
                        height: inner-text.font-size * 2;
                        border-radius: self.height / 2;
                        background: is-today ? UseSurrealismFn.active-color() : UseSurrealismFn.get-color(root.theme, ColorLevel.Normal);
                        border-color: is-active ? UseSurrealismFn.active-color() : UseSurrealismFn.get-color(root.theme, ColorLevel.Normal);
                        area:= TouchArea {
                            mouse-cursor: pointer;
                            clicked => {
                                root.active-date.day = get-day(wItem, index);
                                root.change(active-date);
                            }
                            inner-text:= SText {
                                theme: root.theme;
                                text: get-day(wItem, index);
                                font-weight: 700;
                                font-size: root.font-size;
                                font-family: root.font-family;
                                font-italic: root.font-italic;
                            }
                        }
                    }
                }
            }
            down-wrap:= Rectangle {
                height: 30px;
                background: down-area.has-hover ? UseSurrealismFn.active-color() : UseSurrealismFn.get-color(root.theme, ColorLevel.Normal);
                animate background {
                    duration:ROOT-STYLES.sur-an-duration;
                    easing: ROOT-STYLES.sur-an-easing;
                }
                down-area:= TouchArea {
                    z:111;
                    mouse-cursor: pointer;
                    clicked => {
                        active-date.day = 1;
                        active-date.month = active-date.month + 1;
                        if active-date.month > 12 {
                            active-date.month = 1;
                            active-date.year = active-date.year + 1;
                        }
                        root.update();
                        root.down(active-date);
                    }
                    
                }
                SIcon {
                    theme: root.theme;
                    colorize: self.get-colorize();
                    z: 1;
                    source: UseIcons.icons.Down;
                }
            }    
        }
        
    }
}

component TestCalendar inherits Window {
    height: 500px;
    width: 400px;
    background: #333;
    VerticalLayout {
        padding: 16px;
        Calendar {
            theme: Light;
            height: 464px;
            width: 364px;
        }
    }
}