/**
* ============================================
* @author:syf20020816@outlook.com
* @since:20230912
* @version:0.1.1
* @type:interface
* @description:
* # SCollection
* SCollection is a grid storage box, but in reality it is not based on grid layout.
* It achieves a flexible grid through a combination of dual for loops and horizontal and vertical layouts
* Clicking on the pop-up layer again will close it
* ## properties (card)
* - in property <length> font-size : font size
* - in property <int> column-num : column number
* - in property <int> row-num : row number
* - in-out property <[[CollectionData]]> data : collection data , this is the real data!
* - in property <length> row-height : row height
* - in property <length> column-width : column width
* - in property <length> row-spaceing : row spaceing
* - in property <length> column-spacing: column spacing
* ## functions
* ## callbacks
* - clicked(CollectionData) : run if you click item in SCollection
* ============================================
*/
import { ROOT_STYLES,DefaultSCollectionProps} from "../../themes/index.slint";
import { Themes,BorderType,UseSurrealismFn } from "../../use/index.slint";


export component Collection{
  in property <float> scale : DefaultSCollectionProps.scale;
  in-out property <bool> is-scale : DefaultSCollectionProps.is-scale;
  in property <easing> easing : DefaultSCollectionProps.easing;
  in property <duration> duration : DefaultSCollectionProps.duration;
  pure public function toggle-default(target:length)->length {
    return is-scale?target / scale : target * scale;
  }
  pure public function toggle(target:length,scale-size:float)->length {
    return is-scale?target / scale-size : target * scale-size;
  }
  callback clicked();
  main-view:=Rectangle {
    height: root.height;
    width: root.width;
    // animation
    animate background {
      duration: root.duration;
      easing: root.easing;
    }
    animate height {
      duration: root.duration;
      easing: root.easing;
    }
    animate width {
      duration: root.duration;
      easing: root.easing;
    }
    TouchArea {
      mouse-cursor: pointer;
      clicked => {
        if(is-scale){
          main-view.height /= scale;
          main-view.width /= scale;
        }else{
          main-view.height *= scale;
          main-view.width *= scale;
        }
        root.clicked();
        is-scale=!is-scale;
        
      }
      @children
    }
  }
}