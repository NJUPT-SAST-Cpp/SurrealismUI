import { SIcon } from "../icon/index.slint";
export component Carousel{
    in-out property <[image]> sources;
    private property <[image]> phantoms: self.sources;
    private property <int> center-index: Math.round(sources.length / 2) - 1;
    private property <image> tmp;
    in property <float> fold-strench: 1.1;
    in property <length> fold-width: 42px;
    in property <length> fold-height: root.height;
    in property <ImageFit> fit: ImageFit.preserve;
    in property <bool> focus-main: false;
    in-out property <int> active: 0;
    callback clicked(int);
    if focus-main: main-layout:=  HorizontalLayout {
        alignment: LayoutAlignment.center;
        spacing: 16px;
        for source[index] in root.phantoms: fold-heightsource-wrap := Rectangle {
            width: index == center-index ? root.width - (sources.length * fold-width) - (main-layout.spacing * 2) : fold-width;
            clip: true;
            animate width {
                duration: 800ms;
                easing: ease-in-out-quint;
            }
            icon-wrap:= Rectangle {
                // private property <length> origin-x : self.x;
                private property <bool> move: false;
                height: index == center-index ? root.fold-height :  root.fold-height / ( Math.abs(index - sources.length / 2) / 10 + fold-strench);
                border-radius: index == center-index ? 0 : fold-width / 2;
                clip: true;
                x: icon.pressed ? self.width + main-layout.spacing : 0;
                animate border-radius, height {
                    duration: 800ms;
                    easing: ease-in-out-quint;
                }
                animate x {
                    duration: 800ms;
                    easing: ease-in-out-quart;
                }
                icon:= SIcon {
                    height: root.height;
                    width: 100%;
                    source: source;
                    image-fit: root.fit;
                    clicked => {
                        debug("call1");
                        if index != root.center-index{
                            root.active = index;
                            
                            tmp = root.phantoms[center-index];
                            root.phantoms[center-index] = root.phantoms[root.active];
                            root.phantoms[root.active] = tmp;
                            
                        }
                        root.clicked(root.active);
                    }
                    
                }
            }
        }
    }
    
    if !focus-main: layout:= HorizontalLayout {
        alignment: LayoutAlignment.center;
        spacing: 16px;
        for source[index] in root.sources: source-wrap := Rectangle {
            width: root.active == index ? root.width - (sources.length * fold-width) - (layout.spacing * 2) : fold-width;
            clip: true;
            animate width {
                duration: 800ms;
                easing: ease-in-out-quint;
            }
            Rectangle {
                height: root.active == index ? root.fold-height :  root.fold-height / ( Math.abs(index - sources.length / 2) / 10 + fold-strench);
                border-radius: root.active == index ? 0 : fold-width / 2;
                clip: true;
                animate border-radius, height {
                    duration: 800ms;
                    easing: ease-in-out-quint;
                }

                SIcon {
                    height: root.height;
                    width: 100%;
                    source: source;
                    image-fit: root.fit;
                    clicked => {
                        root.active = index;
                        root.clicked(root.active);
                    }
                }
            }
        }
    }
}

