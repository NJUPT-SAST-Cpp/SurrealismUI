/**
* ============================================
* @author:syf20020816@outlook.com
* @since:20230915
* @version:0.1.3
* @type:interface
* @description:
* # SBadge
* SBadge is a quick way to display user status or events
* ## properties (card)
* - in property <Position> position : where the badge show
* - in-out property <image> icon : icon of the badge
* - in property <brush> icon-color : icon color
* - in property <brush> font-color : font color
* - in property <ResultType> res-type : icon Type see result!(but you can define without use this property)
* ## functions
* - pure public function get-x(p_right:length)->length üëç
* - pure public function get-y(p_bottom:length)->length üëç
* ## callbacks
* ============================================
*/
import { SCard } from "../card/index.slint";
import { ROOT_STYLES} from "../../themes/index.slint";
import { SIcon } from "../icon/index.slint";
import { SText } from "../text/index.slint";
import { Themes,ResultType,BorderType,UseSurrealismFn,UseIcons } from "../../use/index.slint";

export enum Position {
  Left-Top,
  Right-Top,
  Left-Bottom,
  Right-Bottom
}

export component Badge inherits SCard { 
  theme: Light;
  height: ROOT-STYLES.sur-font.font-size;
  width: ROOT-STYLES.sur-font.font-size;
  border-radius: self.height / 2;
  
  in property <Position> position : Position.Right-Bottom;
  in-out property <image> icon : UseIcons.icons.Success;
  in property <brush> icon-color <=> badge-icon.colorize;
  font-color<=>badge-txt.color;
  in property <ResultType> res-type:ResultType.Help;
  in-out property <string> content;
  clip: false;
  pure public function get-x(p_right:length)->length {
      if(self.position == Position.Left-Top){
        0px
      }else if(self.position == Position.Left-Bottom){
        0px
      }else if(self.position == Position.Right-Top){
        p_right - self.width
      }else{
        p_right - self.width
      }
  }
  pure public function get-y(p_bottom:length)->length {
    if(self.position == Position.Left-Top){
      0px
    }else if(self.position == Position.Left-Bottom){
      p_bottom - self.height
    }else if(self.position == Position.Right-Top){
      0px
    }else{
      p_bottom - self.height
    }
  }
  init => {
   
    if(res-type==ResultType.Primary){
      self.theme = Themes.Primary;
      self.icon = UseIcons.icons.Smiling-face;
      self.content = "primary message!";
    }else if (res-type==ResultType.Success){
      self.theme = Themes.Success;
      self.content = "success message!";
      self.icon = UseIcons.icons.Success;
    }else if (res-type==ResultType.Info){
      self.theme = Themes.Info;
      self.icon = UseIcons.icons.Info;
      self.content = "info message!";
    }else if (res-type==ResultType.Error){
      self.theme = Themes.Error;
      self.icon = UseIcons.icons.Close-one;
      self.content = "error message!"
    }else if (res-type==ResultType.Warning){
      self.theme = Themes.Warning;
      self.icon = UseIcons.icons.Attention;
      self.content = "warning message!"
    }else{
      self.theme = Themes.Light;
      self.icon = UseIcons.icons.Help;
      self.content = "help message!"
    }
  }
  HorizontalLayout {
    spacing: UseSurrealismFn.get-space(txt-view.width);
    badge-icon:= SIcon { 
      source: root.icon;
      theme: root.theme;
      clicked => {
        txt-view.visible=!txt-view.visible
      }
    }
    txt-view:=SCard {
      visible: false;
      theme: root.theme;
      height: root.height;
      card-width: badge-txt.width;
      padding-type: Small;
      border-type: Large;
      
      badge-txt:=SText { 
        font-size: ROOT-STYLES.sur-font.font-size  - 4px;
        text: root.content;
        theme: root.theme;
      }
    }
  }
}